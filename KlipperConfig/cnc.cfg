[gcode_macro G00]
gcode:  
    G1 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
    
[gcode_macro G01]
gcode: 
    G1 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}

[gcode_macro G02]
gcode: 
    G2 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}

[gcode_macro G03]
gcode: 
    G2 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}

[gcode_macro G04]
gcode: 
    G4 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}

# M3
# Spindle direction clockwise (starts the spindle)
[gcode_macro M03]
gcode:
    {% set S = params.S|default(1000)|int %}
    SET_FAN_SPEED FAN=spindle SPEED={S/20000.0}

# M5
# Stop Spindle Rotation
[gcode_macro M05]
gcode:
    SET_FAN_SPEED FAN=spindle SPEED=0

# M2
# Program Pause and End
[gcode_macro M02]
gcode:

[gcode_macro SET_Z_ZERO]
gcode:
  SET_KINEMATIC_POSITION Z=0

[gcode_macro SET_Z_25]
gcode:
  SET_KINEMATIC_POSITION Z=25

[gcode_macro SET_Z_50]
gcode:
  SET_KINEMATIC_POSITION Z=50
  
[gcode_macro SET_XY_ZERO]
gcode:
  SET_KINEMATIC_POSITION X=0 Y=0

[gcode_macro SET_ZERO]
gcode:
  SET_KINEMATIC_POSITION X=0 Y=0 Z=0

[gcode_macro PAUSE]
variable_paused_z: 0
rename_existing: PAUSE_BASE
gcode:
  # Save the current G-code state
  SAVE_GCODE_STATE NAME=PAUSE_state

  M5 # Stop the spindle

  PAUSE_BASE

[gcode_macro RESUME]
rename_existing: RESUME_BASE
gcode:
  {% set svv = printer.save_variables.variables %}
  M3 S{svv.spindle_speed} 
  
  # Restore the previously saved G-code state
  RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=0

  RESUME_BASE

[gcode_macro CANCEL_PRINT]
rename_existing: CANCEL_PRINT_BASE
gcode:
  M5  # Stop the spindle
  M84 X Y Z # Turn off the motors
  CANCEL_PRINT_BASE

# G28: Custom homing sequence
[gcode_macro G28]
rename_existing: G28.0
gcode:
  # Define default behavior when no specific axis is requested
  {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}
  
  # Home Z first if requested or if no axes are specified to avoid collisions
  {% if 'Z' in params or home_all %}
    G28.0 Z
  {% endif %}

  # Home X and Y; home both if no specific axis is mentioned
  {% if 'X' in params or 'Y' in params or home_all %}
    G28.0 {% if 'X' in params or home_all %}X{% endif %} {% if 'Y' in params or home_all %}Y{% endif %}
  {% endif %}
  
  # Force Absolute positioning mode
  G90

[gcode_macro FLATTEN_AREA]
gcode:

    {% set start_x = params.START_X|default(0)|float %}
    {% set start_y = params.START_Y|default(0)|float %}

    {% set end_x = params.END_X|default(printer.configfile.config["stepper_x"].position_max|float)|float %}
    {% set end_y = params.END_Y|default(printer.configfile.config["stepper_y"].position_max|float)|float %}

    {% set cut_depth = params.CUT_DEPTH|default(-0.5)|float %}

    {% set feed_rate = (params.FEED_RATE|default(10)|float) * 60 %} # Convert mm/s to mm/min
    {% set step_over = params.STEP_OVER|default(15)|float %}
    {% set spindle_speed = params.SPINDLE_SPEED|default(10000)|float %}

    {% set max_z_with_offset = printer.configfile.config["stepper_z"].position_max|float - printer.gcode_move.homing_origin.z|float %}
    
    # Calculate the number of steps needed, ensuring it's an integer
    {% set num_steps = (((end_y - start_y - step_over) / step_over)|round(0, 'ceil'))|int %}

    RESPOND PREFIX="warning" MSG="Offsets are obeyed by this macro" 
    RESPOND PREFIX="info" MSG="Flattening Area: ({start_x}, {start_y}) to ({end_x}, {end_y}), cut depth: {cut_depth}" 

    G90 ; Absolute positioning
    G21 ; Set units to millimeters
    
    M3 S{spindle_speed}
    G0 Z5

    # Perimeter cut
    G0 X{start_x} Y{start_y} F{feed_rate}
    G1 Z{cut_depth} F{feed_rate / 2}
    G1 X{end_x} F{feed_rate} ; Cut along the X axis
    G1 Y{end_y} F{feed_rate} ; Cut along the Y axis
    G1 X{start_x} F{feed_rate} ; Cut back along the X axis
    G1 Y{start_y} F{feed_rate} ; Cut back along the Y axis

    #End position X=0 Y=0
    G0 X{step_over} F{feed_rate} ; Move to start position at current row

    # Sequential pattern cut
    {% for i in range(num_steps) %}
        {% set ypos = i * step_over + step_over %}
        G0 Y{ypos} F{feed_rate} ; Move to next row

        {% if i % 2 == 1 %}
          # The code here will execute if 'i' is odd.
          G0 X{step_over} F{feed_rate} ; Move to the step_over (near x_min) to perform a cut on moves 1, 3, 5 etc
        {% else %}
          G0 X{end_x - step_over} F{feed_rate} ; Move to the x_max minus step_over to perform a cut on moves 0, 2, 4 etc
        {% endif %}

    {% endfor %}

    G0 Z5 ; Raise to safety height
